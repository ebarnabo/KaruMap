/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tsserver/server.ts
var server_exports = {};
__export(server_exports, {
  ANONYMOUS: () => ANONYMOUS,
  AccessFlags: () => AccessFlags,
  AssertionLevel: () => AssertionLevel,
  AssignmentDeclarationKind: () => AssignmentDeclarationKind,
  AssignmentKind: () => AssignmentKind,
  Associativity: () => Associativity,
  BreakpointResolver: () => ts_BreakpointResolver_exports,
  BuilderFileEmit: () => BuilderFileEmit,
  BuilderProgramKind: () => BuilderProgramKind,
  BuilderState: () => BuilderState,
  BundleFileSectionKind: () => BundleFileSectionKind,
  CallHierarchy: () => ts_CallHierarchy_exports,
  CharacterCodes: () => CharacterCodes,
  CheckFlags: () => CheckFlags,
  CheckMode: () => CheckMode,
  ClassificationType: () => ClassificationType,
  ClassificationTypeNames: () => ClassificationTypeNames,
  CommentDirectiveType: () => CommentDirectiveType,
  Comparison: () => Comparison,
  CompletionInfoFlags: () => CompletionInfoFlags,
  CompletionTriggerKind: () => CompletionTriggerKind,
  Completions: () => ts_Completions_exports,
  ConfigFileProgramReloadLevel: () => ConfigFileProgramReloadLevel,
  ContextFlags: () => ContextFlags,
  CoreServicesShimHostAdapter: () => CoreServicesShimHostAdapter,
  Debug: () => Debug,
  DiagnosticCategory: () => DiagnosticCategory,
  Diagnostics: () => Diagnostics,
  DocumentHighlights: () => DocumentHighlights,
  ElementFlags: () => ElementFlags,
  EmitFlags: () => EmitFlags,
  EmitHint: () => EmitHint,
  EmitOnly: () => EmitOnly,
  EndOfLineState: () => EndOfLineState,
  EnumKind: () => EnumKind,
  ExitStatus: () => ExitStatus,
  ExportKind: () => ExportKind,
  Extension: () => Extension,
  ExternalEmitHelpers: () => ExternalEmitHelpers,
  FileIncludeKind: () => FileIncludeKind,
  FilePreprocessingDiagnosticsKind: () => FilePreprocessingDiagnosticsKind,
  FileSystemEntryKind: () => FileSystemEntryKind,
  FileWatcherEventKind: () => FileWatcherEventKind,
  FindAllReferences: () => ts_FindAllReferences_exports,
  FlattenLevel: () => FlattenLevel,
  FlowFlags: () => FlowFlags,
  ForegroundColorEscapeSequences: () => ForegroundColorEscapeSequences,
  FunctionFlags: () => FunctionFlags,
  GeneratedIdentifierFlags: () => GeneratedIdentifierFlags,
  GetLiteralTextFlags: () => GetLiteralTextFlags,
  GoToDefinition: () => ts_GoToDefinition_exports,
  HighlightSpanKind: () => HighlightSpanKind,
  ImportKind: () => ImportKind,
  ImportsNotUsedAsValues: () => ImportsNotUsedAsValues,
  IndentStyle: () => IndentStyle,
  IndexFlags: () => IndexFlags,
  IndexKind: () => IndexKind,
  InferenceFlags: () => InferenceFlags,
  InferencePriority: () => InferencePriority,
  InlayHintKind: () => InlayHintKind,
  InlayHints: () => ts_InlayHints_exports,
  InternalEmitFlags: () => InternalEmitFlags,
  InternalSymbolName: () => InternalSymbolName,
  InvalidatedProjectKind: () => InvalidatedProjectKind,
  JsDoc: () => ts_JsDoc_exports,
  JsTyping: () => ts_JsTyping_exports,
  JsxEmit: () => JsxEmit,
  JsxFlags: () => JsxFlags,
  JsxReferenceKind: () => JsxReferenceKind,
  LanguageServiceMode: () => LanguageServiceMode,
  LanguageServiceShimHostAdapter: () => LanguageServiceShimHostAdapter,
  LanguageVariant: () => LanguageVariant,
  LexicalEnvironmentFlags: () => LexicalEnvironmentFlags,
  ListFormat: () => ListFormat,
  LogLevel: () => LogLevel,
  MemberOverrideStatus: () => MemberOverrideStatus,
  ModifierFlags: () => ModifierFlags,
  ModuleDetectionKind: () => ModuleDetectionKind,
  ModuleInstanceState: () => ModuleInstanceState,
  ModuleKind: () => ModuleKind,
  ModuleResolutionKind: () => ModuleResolutionKind,
  ModuleSpecifierEnding: () => ModuleSpecifierEnding,
  NavigateTo: () => ts_NavigateTo_exports,
  NavigationBar: () => ts_NavigationBar_exports,
  NewLineKind: () => NewLineKind,
  NodeBuilderFlags: () => NodeBuilderFlags,
  NodeCheckFlags: () => NodeCheckFlags,
  NodeFactoryFlags: () => NodeFactoryFlags,
  NodeFlags: () => NodeFlags,
  NodeResolutionFeatures: () => NodeResolutionFeatures,
  ObjectFlags: () => ObjectFlags,
  OperationCanceledException: () => OperationCanceledException,
  OperatorPrecedence: () => OperatorPrecedence,
  OrganizeImports: () => ts_OrganizeImports_exports,
  OrganizeImportsMode: () => OrganizeImportsMode,
  OuterExpressionKinds: () => OuterExpressionKinds,
  OutliningElementsCollector: () => ts_OutliningElementsCollector_exports,
  OutliningSpanKind: () => OutliningSpanKind,
  OutputFileType: () => OutputFileType,
  PackageJsonAutoImportPreference: () => PackageJsonAutoImportPreference,
  PackageJsonDependencyGroup: () => PackageJsonDependencyGroup,
  PatternMatchKind: () => PatternMatchKind,
  PollingInterval: () => PollingInterval,
  PollingWatchKind: () => PollingWatchKind,
  PragmaKindFlags: () => PragmaKindFlags,
  PrivateIdentifierKind: () => PrivateIdentifierKind,
  ProcessLevel: () => ProcessLevel,
  QuotePreference: () => QuotePreference,
  RelationComparisonResult: () => RelationComparisonResult,
  Rename: () => ts_Rename_exports,
  ScriptElementKind: () => ScriptElementKind,
  ScriptElementKindModifier: () => ScriptElementKindModifier,
  ScriptKind: () => ScriptKind,
  ScriptSnapshot: () => ScriptSnapshot,
  ScriptTarget: () => ScriptTarget,
  SemanticClassificationFormat: () => SemanticClassificationFormat,
  SemanticMeaning: () => SemanticMeaning,
  SemicolonPreference: () => SemicolonPreference,
  SignatureCheckMode: () => SignatureCheckMode,
  SignatureFlags: () => SignatureFlags,
  SignatureHelp: () => ts_SignatureHelp_exports,
  SignatureKind: () => SignatureKind,
  SmartSelectionRange: () => ts_SmartSelectionRange_exports,
  SnippetKind: () => SnippetKind,
  SortKind: () => SortKind,
  StructureIsReused: () => StructureIsReused,
  SymbolAccessibility: () => SymbolAccessibility,
  SymbolDisplay: () => ts_SymbolDisplay_exports,
  SymbolDisplayPartKind: () => SymbolDisplayPartKind,
  SymbolFlags: () => SymbolFlags,
  SymbolFormatFlags: () => SymbolFormatFlags,
  SyntaxKind: () => SyntaxKind,
  SyntheticSymbolKind: () => SyntheticSymbolKind,
  Ternary: () => Ternary,
  ThrottledCancellationToken: () => ThrottledCancellationToken,
  TokenClass: () => TokenClass,
  TokenFlags: () => TokenFlags,
  TransformFlags: () => TransformFlags,
  TypeFacts: () => TypeFacts,
  TypeFlags: () => TypeFlags,
  TypeFormatFlags: () => TypeFormatFlags,
  TypeMapKind: () => TypeMapKind,
  TypePredicateKind: () => TypePredicateKind,
  TypeReferenceSerializationKind: () => TypeReferenceSerializationKind,
  TypeScriptServicesFactory: () => TypeScriptServicesFactory,
  UnionReduction: () => UnionReduction,
  UpToDateStatusType: () => UpToDateStatusType,
  VarianceFlags: () => VarianceFlags,
  Version: () => Version,
  VersionRange: () => VersionRange,
  WatchDirectoryFlags: () => WatchDirectoryFlags,
  WatchDirectoryKind: () => WatchDirectoryKind,
  WatchFileKind: () => WatchFileKind,
  WatchLogLevel: () => WatchLogLevel,
  WatchType: () => WatchType,
  accessPrivateIdentifier: () => accessPrivateIdentifier,
  addEmitFlags: () => addEmitFlags,
  addEmitHelper: () => addEmitHelper,
  addEmitHelpers: () => addEmitHelpers,
  addInternalEmitFlags: () => addInternalEmitFlags,
  addNodeFactoryPatcher: () => addNodeFactoryPatcher,
  addObjectAllocatorPatcher: () => addObjectAllocatorPatcher,
  addRange: () => addRange,
  addRelatedInfo: () => addRelatedInfo,
  addSyntheticLeadingComment: () => addSyntheticLeadingComment,
  addSyntheticTrailingComment: () => addSyntheticTrailingComment,
  addToSeen: () => addToSeen,
  advancedAsyncSuperHelper: () => advancedAsyncSuperHelper,
  affectsDeclarationPathOptionDeclarations: () => affectsDeclarationPathOptionDeclarations,
  affectsEmitOptionDeclarations: () => affectsEmitOptionDeclarations,
  allKeysStartWithDot: () => allKeysStartWithDot,
  altDirectorySeparator: () => altDirectorySeparator,
  and: () => and,
  append: () => append,
  appendIfUnique: () => appendIfUnique,
  arrayFrom: () => arrayFrom,
  arrayIsEqualTo: () => arrayIsEqualTo,
  arrayIsHomogeneous: () => arrayIsHomogeneous,
  arrayIsSorted: () => arrayIsSorted,
  arrayOf: () => arrayOf,
  arrayReverseIterator: () => arrayReverseIterator,
  arrayToMap: () => arrayToMap,
  arrayToMultiMap: () => arrayToMultiMap,
  arrayToNumericMap: () => arrayToNumericMap,
  arraysEqual: () => arraysEqual,
  assertType: () => assertType,
  assign: () => assign,
  assignHelper: () => assignHelper,
  asyncDelegator: () => asyncDelegator,
  asyncGeneratorHelper: () => asyncGeneratorHelper,
  asyncSuperHelper: () => asyncSuperHelper,
  asyncValues: () => asyncValues,
  attachFileToDiagnostics: () => attachFileToDiagnostics,
  awaitHelper: () => awaitHelper,
  awaiterHelper: () => awaiterHelper,
  base64decode: () => base64decode,
  base64encode: () => base64encode,
  binarySearch: () => binarySearch,
  binarySearchKey: () => binarySearchKey,
  bindSourceFile: () => bindSourceFile,
  breakIntoCharacterSpans: () => breakIntoCharacterSpans,
  breakIntoWordSpans: () => breakIntoWordSpans,
  buildLinkParts: () => buildLinkParts,
  buildOpts: () => buildOpts,
  buildOverload: () => buildOverload,
  bundlerModuleNameResolver: () => bundlerModuleNameResolver,
  canBeConvertedToAsync: () => canBeConvertedToAsync,
  canHaveDecorators: () => canHaveDecorators,
  canHaveExportModifier: () => canHaveExportModifier,
  canHaveFlowNode: () => canHaveFlowNode,
  canHaveIllegalDecorators: () => canHaveIllegalDecorators,
  canHaveIllegalModifiers: () => canHaveIllegalModifiers,
  canHaveIllegalType: () => canHaveIllegalType,
  canHaveIllegalTypeParameters: () => canHaveIllegalTypeParameters,
  canHaveJSDoc: () => canHaveJSDoc,
  canHaveLocals: () => canHaveLocals,
  canHaveModifiers: () => canHaveModifiers,
  canHaveSymbol: () => canHaveSymbol,
  canJsonReportNoInputFiles: () => canJsonReportNoInputFiles,
  canProduceDiagnostics: () => canProduceDiagnostics,
  canUsePropertyAccess: () => canUsePropertyAccess,
  canWatchAffectingLocation: () => canWatchAffectingLocation,
  canWatchAtTypes: () => canWatchAtTypes,
  canWatchDirectoryOrFile: () => canWatchDirectoryOrFile,
  cartesianProduct: () => cartesianProduct,
  cast: () => cast,
  chainBundle: () => chainBundle,
  chainDiagnosticMessages: () => chainDiagnosticMessages,
  changeAnyExtension: () => changeAnyExtension,
  changeCompilerHostLikeToUseCache: () => changeCompilerHostLikeToUseCache,
  changeExtension: () => changeExtension,
  changesAffectModuleResolution: () => changesAffectModuleResolution,
  changesAffectingProgramStructure: () => changesAffectingProgramStructure,
  childIsDecorated: () => childIsDecorated,
  classElementOrClassElementParameterIsDecorated: () => classElementOrClassElementParameterIsDecorated,
  classOrConstructorParameterIsDecorated: () => classOrConstructorParameterIsDecorated,
  classPrivateFieldGetHelper: () => classPrivateFieldGetHelper,
  classPrivateFieldInHelper: () => classPrivateFieldInHelper,
  classPrivateFieldSetHelper: () => classPrivateFieldSetHelper,
  classicNameResolver: () => classicNameResolver,
  classifier: () => ts_classifier_exports,
  cleanExtendedConfigCache: () => cleanExtendedConfigCache,
  clear: () => clear,
  clearMap: () => clearMap,
  clearSharedExtendedConfigFileWatcher: () => clearSharedExtendedConfigFileWatcher,
  climbPastPropertyAccess: () => climbPastPropertyAccess,
  climbPastPropertyOrElementAccess: () => climbPastPropertyOrElementAccess,
  clone: () => clone,
  cloneCompilerOptions: () => cloneCompilerOptions,
  closeFileWatcher: () => closeFileWatcher,
  closeFileWatcherOf: () => closeFileWatcherOf,
  codefix: () => ts_codefix_exports,
  collapseTextChangeRangesAcrossMultipleVersions: () => collapseTextChangeRangesAcrossMultipleVersions,
  collectExternalModuleInfo: () => collectExternalModuleInfo,
  combine: () => combine,
  combinePaths: () => combinePaths,
  commentPragmas: () => commentPragmas,
  commonOptionsWithBuild: () => commonOptionsWithBuild,
  commonPackageFolders: () => commonPackageFolders,
  compact: () => compact,
  compareBooleans: () => compareBooleans,
  compareDataObjects: () => compareDataObjects,
  compareDiagnostics: () => compareDiagnostics,
  compareDiagnosticsSkipRelatedInformation: () => compareDiagnosticsSkipRelatedInformation,
  compareEmitHelpers: () => compareEmitHelpers,
  compareNumberOfDirectorySeparators: () => compareNumberOfDirectorySeparators,
  comparePaths: () => comparePaths,
  comparePathsCaseInsensitive: () => comparePathsCaseInsensitive,
  comparePathsCaseSensitive: () => comparePathsCaseSensitive,
  comparePatternKeys: () => comparePatternKeys,
  compareProperties: () => compareProperties,
  compareStringsCaseInsensitive: () => compareStringsCaseInsensitive,
  compareStringsCaseInsensitiveEslintCompatible: () => compareStringsCaseInsensitiveEslintCompatible,
  compareStringsCaseSensitive: () => compareStringsCaseSensitive,
  compareStringsCaseSensitiveUI: () => compareStringsCaseSensitiveUI,
  compareTextSpans: () => compareTextSpans,
  compareValues: () => compareValues,
  compileOnSaveCommandLineOption: () => compileOnSaveCommandLineOption,
  compilerOptionsAffectDeclarationPath: () => compilerOptionsAffectDeclarationPath,
  compilerOptionsAffectEmit: () => compilerOptionsAffectEmit,
  compilerOptionsAffectSemanticDiagnostics: () => compilerOptionsAffectSemanticDiagnostics,
  compilerOptionsDidYouMeanDiagnostics: () => compilerOptionsDidYouMeanDiagnostics,
  compilerOptionsIndicateEsModules: () => compilerOptionsIndicateEsModules,
  compose: () => compose,
  computeCommonSourceDirectoryOfFilenames: () => computeCommonSourceDirectoryOfFilenames,
  computeLineAndCharacterOfPosition: () => computeLineAndCharacterOfPosition,
  computeLineOfPosition: () => computeLineOfPosition,
  computeLineStarts: () => computeLineStarts,
  computePositionOfLineAndCharacter: () => computePositionOfLineAndCharacter,
  computeSignature: () => computeSignature,
  computeSignatureWithDiagnostics: () => computeSignatureWithDiagnostics,
  computeSuggestionDiagnostics: () => computeSuggestionDiagnostics,
  concatenate: () => concatenate,
  concatenateDiagnosticMessageChains: () => concatenateDiagnosticMessageChains,
  consumesNodeCoreModules: () => consumesNodeCoreModules,
  contains: () => contains,
  containsIgnoredPath: () => containsIgnoredPath,
  containsObjectRestOrSpread: () => containsObjectRestOrSpread,
  containsParseError: () => containsParseError,
  containsPath: () => containsPath,
  convertCompilerOptionsForTelemetry: () => convertCompilerOptionsForTelemetry,
  convertCompilerOptionsFromJson: () => convertCompilerOptionsFromJson,
  convertJsonOption: () => convertJsonOption,
  convertToBase64: () => convertToBase64,
  convertToJson: () => convertToJson,
  convertToObject: () => convertToObject,
  convertToOptionsWithAbsolutePaths: () => convertToOptionsWithAbsolutePaths,
  convertToRelativePath: () => convertToRelativePath,
  convertToTSConfig: () => convertToTSConfig,
  convertTypeAcquisitionFromJson: () => convertTypeAcquisitionFromJson,
  copyComments: () => copyComments,
  copyEntries: () => copyEntries,
  copyLeadingComments: () => copyLeadingComments,
  copyProperties: () => copyProperties,
  copyTrailingAsLeadingComments: () => copyTrailingAsLeadingComments,
  copyTrailingComments: () => copyTrailingComments,
  couldStartTrivia: () => couldStartTrivia,
  countWhere: () => countWhere,
  createAbstractBuilder: () => createAbstractBuilder,
  createAccessorPropertyBackingField: () => createAccessorPropertyBackingField,
  createAccessorPropertyGetRedirector: () => createAccessorPropertyGetRedirector,
  createAccessorPropertySetRedirector: () => createAccessorPropertySetRedirector,
  createBaseNodeFactory: () => createBaseNodeFactory,
  createBinaryExpressionTrampoline: () => createBinaryExpressionTrampoline,
  createBindingHelper: () => createBindingHelper,
  createBuildInfo: () => createBuildInfo,
  createBuilderProgram: () => createBuilderProgram,
  createBuilderProgramUsingProgramBuildInfo: () => createBuilderProgramUsingProgramBuildInfo,
  createBuilderStatusReporter: () => createBuilderStatusReporter,
  createCacheWithRedirects: () => createCacheWithRedirects,
  createCacheableExportInfoMap: () => createCacheableExportInfoMap,
  createCachedDirectoryStructureHost: () => createCachedDirectoryStructureHost,
  createClassifier: () => createClassifier,
  createCommentDirectivesMap: () => createCommentDirectivesMap,
  createCompilerDiagnostic: () => createCompilerDiagnostic,
  createCompilerDiagnosticForInvalidCustomType: () => createCompilerDiagnosticForInvalidCustomType,
  createCompilerDiagnosticFromMessageChain: () => createCompilerDiagnosticFromMessageChain,
  createCompilerHost: () => createCompilerHost,
  createCompilerHostFromProgramHost: () => createCompilerHostFromProgramHost,
  createCompilerHostWorker: () => createCompilerHostWorker,
  createDetachedDiagnostic: () => createDetachedDiagnostic,
  createDiagnosticCollection: () => createDiagnosticCollection,
  createDiagnosticForFileFromMessageChain: () => createDiagnosticForFileFromMessageChain,
  createDiagnosticForNode: () => createDiagnosticForNode,
  createDiagnosticForNodeArray: () => createDiagnosticForNodeArray,
  createDiagnosticForNodeArrayFromMessageChain: () => createDiagnosticForNodeArrayFromMessageChain,
  createDiagnosticForNodeFromMessageChain: () => createDiagnosticForNodeFromMessageChain,
  createDiagnosticForNodeInSourceFile: () => createDiagnosticForNodeInSourceFile,
  createDiagnosticForRange: () => createDiagnosticForRange,
  createDiagnosticMessageChainFromDiagnostic: () => createDiagnosticMessageChainFromDiagnostic,
  createDiagnosticReporter: () => createDiagnosticReporter,
  createDocumentPositionMapper: () => createDocumentPositionMapper,
  createDocumentRegistry: () => createDocumentRegistry,
  createDocumentRegistryInternal: () => createDocumentRegistryInternal,
  createEmitAndSemanticDiagnosticsBuilderProgram: () => createEmitAndSemanticDiagnosticsBuilderProgram,
  createEmitHelperFactory: () => createEmitHelperFactory,
  createEmptyExports: () => createEmptyExports,
  createExpressionForJsxElement: () => createExpressionForJsxElement,
  createExpressionForJsxFragment: () => createExpressionForJsxFragment,
  createExpressionForObjectLiteralElementLike: () => createExpressionForObjectLiteralElementLike,
  createExpressionForPropertyName: () => createExpressionForPropertyName,
  createExpressionFromEntityName: () => createExpressionFromEntityName,
  createExternalHelpersImportDeclarationIfNeeded: () => createExternalHelpersImportDeclarationIfNeeded,
  createFileDiagnostic: () => createFileDiagnostic,
  createFileDiagnosticFromMessageChain: () => createFileDiagnosticFromMessageChain,
  createForOfBindingStatement: () => createForOfBindingStatement,
  createGetCanonicalFileName: () => createGetCanonicalFileName,
  createGetSourceFile: () => createGetSourceFile,
  createGetSymbolAccessibilityDiagnosticForNode: () => createGetSymbolAccessibilityDiagnosticForNode,
  createGetSymbolAccessibilityDiagnosticForNodeName: () => createGetSymbolAccessibilityDiagnosticForNodeName,
  createGetSymbolWalker: () => createGetSymbolWalker,
  createIncrementalCompilerHost: () => createIncrementalCompilerHost,
  createIncrementalProgram: () => createIncrementalProgram,
  createInputFiles: () => createInputFiles,
  createInputFilesWithFilePaths: () => createInputFilesWithFilePaths,
  createInputFilesWithFileTexts: () => createInputFilesWithFileTexts,
  createJsxFactoryExpression: () => createJsxFactoryExpression,
  createLanguageService: () => createLanguageService,
  createLanguageServiceSourceFile: () => createLanguageServiceSourceFile,
  createMemberAccessForPropertyName: () => createMemberAccessForPropertyName,
  createModeAwareCache: () => createModeAwareCache,
  createModeAwareCacheKey: () => createModeAwareCacheKey,
  createModuleNotFoundChain: () => createModuleNotFoundChain,
  createModuleResolutionCache: () => createModuleResolutionCache,
  createModuleResolutionLoader: () => createModuleResolutionLoader,
  createModuleSpecifierResolutionHost: () => createModuleSpecifierResolutionHost,
  createMultiMap: () => createMultiMap,
  createNodeConverters: () => createNodeConverters,
  createNodeFactory: () => createNodeFactory,
  createOptionNameMap: () => createOptionNameMap,
  createOverload: () => createOverload,
  createPackageJsonImportFilter: () => createPackageJsonImportFilter,
  createPackageJsonInfo: () => createPackageJsonInfo,
  createParenthesizerRules: () => createParenthesizerRules,
  createPatternMatcher: () => createPatternMatcher,
  createPrependNodes: () => createPrependNodes,
  createPrinter: () => createPrinter,
  createPrinterWithDefaults: () => createPrinterWithDefaults,
  createPrinterWithRemoveComments: () => createPrinterWithRemoveComments,
  createPrinterWithRemoveCommentsNeverAsciiEscape: () => createPrinterWithRemoveCommentsNeverAsciiEscape,
  createPrinterWithRemoveCommentsOmitTrailingSemicolon: () => createPrinterWithRemoveCommentsOmitTrailingSemicolon,
  createProgram: () => createProgram,
  createProgramHost: () => createProgramHost,
  createPropertyNameNodeForIdentifierOrLiteral: () => createPropertyNameNodeForIdentifierOrLiteral,
  createQueue: () => createQueue,
  createRange: () => createRange,
  createRedirectedBuilderProgram: () => createRedirectedBuilderProgram,
  createResolutionCache: () => createResolutionCache,
  createRuntimeTypeSerializer: () => createRuntimeTypeSerializer,
  createScanner: () => createScanner,
  createSemanticDiagnosticsBuilderProgram: () => createSemanticDiagnosticsBuilderProgram,
  createSet: () => createSet,
  createSolutionBuilder: () => createSolutionBuilder,
  createSolutionBuilderHost: () => createSolutionBuilderHost,
  createSolutionBuilderWithWatch: () => createSolutionBuilderWithWatch,
  createSolutionBuilderWithWatchHost: () => createSolutionBuilderWithWatchHost,
  createSortedArray: () => createSortedArray,
  createSourceFile: () => createSourceFile,
  createSourceMapGenerator: () => createSourceMapGenerator,
  createSourceMapSource: () => createSourceMapSource,
  createSuperAccessVariableStatement: () => createSuperAccessVariableStatement,
  createSymbolTable: () => createSymbolTable,
  createSymlinkCache: () => createSymlinkCache,
  createSystemWatchFunctions: () => createSystemWatchFunctions,
  createTextChange: () => createTextChange,
  createTextChangeFromStartLength: () => createTextChangeFromStartLength,
  createTextChangeRange: () => createTextChangeRange,
  createTextRangeFromNode: () => createTextRangeFromNode,
  createTextRangeFromSpan: () => createTextRangeFromSpan,
  createTextSpan: () => createTextSpan,
  createTextSpanFromBounds: () => createTextSpanFromBounds,
  createTextSpanFromNode: () => createTextSpanFromNode,
  createTextSpanFromRange: () => createTextSpanFromRange,
  createTextSpanFromStringLiteralLikeContent: () => createTextSpanFromStringLiteralLikeContent,
  createTextWriter: () => createTextWriter,
  createTokenRange: () => createTokenRange,
  createTypeChecker: () => createTypeChecker,
  createTypeReferenceDirectiveResolutionCache: () => createTypeReferenceDirectiveResolutionCache,
  createTypeReferenceResolutionLoader: () => createTypeReferenceResolutionLoader,
  createUnparsedSourceFile: () => createUnparsedSourceFile,
  createWatchCompilerHost: () => createWatchCompilerHost2,
  createWatchCompilerHostOfConfigFile: () => createWatchCompilerHostOfConfigFile,
  createWatchCompilerHostOfFilesAndCompilerOptions: () => createWatchCompilerHostOfFilesAndCompilerOptions,
  createWatchFactory: () => createWatchFactory,
  createWatchHost: () => createWatchHost,
  createWatchProgram: () => createWatchProgram,
  createWatchStatusReporter: () => createWatchStatusReporter,
  createWriteFileMeasuringIO: () => createWriteFileMeasuringIO,
  declarationNameToString: () => declarationNameToString,
  decodeMappings: () => decodeMappings,
  decodedTextSpanIntersectsWith: () => decodedTextSpanIntersectsWith,
  decorateHelper: () => decorateHelper,
  deduplicate: () => deduplicate,
  defaultIncludeSpec: () => defaultIncludeSpec,
  defaultInitCompilerOptions: () => defaultInitCompilerOptions,
  defaultMaximumTruncationLength: () => defaultMaximumTruncationLength,
  detectSortCaseSensitivity: () => detectSortCaseSensitivity,
  diagnosticCategoryName: () => diagnosticCategoryName,
  diagnosticToString: () => diagnosticToString,
  directoryProbablyExists: () => directoryProbablyExists,
  directorySeparator: () => directorySeparator,
  displayPart: () => displayPart,
  displayPartsToString: () => displayPartsToString,
  disposeEmitNodes: () => disposeEmitNodes,
  documentSpansEqual: () => documentSpansEqual,
  dumpTracingLegend: () => dumpTracingLegend,
  elementAt: () => elementAt,
  elideNodes: () => elideNodes,
  emitComments: () => emitComments,
  emitDetachedComments: () => emitDetachedComments,
  emitFiles: () => emitFiles,
  emitFilesAndReportErrors: () => emitFilesAndReportErrors,
  emitFilesAndReportErrorsAndGetExitStatus: () => emitFilesAndReportErrorsAndGetExitStatus,
  emitModuleKindIsNonNodeESM: () => emitModuleKindIsNonNodeESM,
  emitNewLineBeforeLeadingCommentOfPosition: () => emitNewLineBeforeLeadingCommentOfPosition,
  emitNewLineBeforeLeadingComments: () => emitNewLineBeforeLeadingComments,
  emitNewLineBeforeLeadingCommentsOfPosition: () => emitNewLineBeforeLeadingCommentsOfPosition,
  emitSkippedWithNoDiagnostics: () => emitSkippedWithNoDiagnostics,
  emitUsingBuildInfo: () => emitUsingBuildInfo,
  emptyArray: () => emptyArray,
  emptyFileSystemEntries: () => emptyFileSystemEntries,
  emptyMap: () => emptyMap,
  emptyOptions: () => emptyOptions,
  emptySet: () => emptySet,
  endsWith: () => endsWith,
  ensurePathIsNonModuleName: () => ensurePathIsNonModuleName,
  ensureScriptKind: () => ensureScriptKind,
  ensureTrailingDirectorySeparator: () => ensureTrailingDirectorySeparator,
  entityNameToString: () => entityNameToString,
  enumerateInsertsAndDeletes: () => enumerateInsertsAndDeletes,
  equalOwnProperties: () => equalOwnProperties,
  equateStringsCaseInsensitive: () => equateStringsCaseInsensitive,
  equateStringsCaseSensitive: () => equateStringsCaseSensitive,
  equateValues: () => equateValues,
  esDecorateHelper: () => esDecorateHelper,
  escapeJsxAttributeString: () => escapeJsxAttributeString,
  escapeLeadingUnderscores: () => escapeLeadingUnderscores,
  escapeNonAsciiString: () => escapeNonAsciiString,
  escapeSnippetText: () => escapeSnippetText,
  escapeString: () => escapeString,
  every: () => every,
  expandPreOrPostfixIncrementOrDecrementExpression: () => expandPreOrPostfixIncrementOrDecrementExpression,
  explainFiles: () => explainFiles,
  explainIfFileIsRedirectAndImpliedFormat: () => explainIfFileIsRedirectAndImpliedFormat,
  exportAssignmentIsAlias: () => exportAssignmentIsAlias,
  exportStarHelper: () => exportStarHelper,
  expressionResultIsUnused: () => expressionResultIsUnused,
  extend: () => extend,
  extendsHelper: () => extendsHelper,
  extensionFromPath: () => extensionFromPath,
  extensionIsTS: () => extensionIsTS,
  extensionsNotSupportingExtensionlessResolution: () => extensionsNotSupportingExtensionlessResolution,
  externalHelpersModuleNameText: () => externalHelpersModuleNameText,
  factory: () => factory,
  fileExtensionIs: () => fileExtensionIs,
  fileExtensionIsOneOf: () => fileExtensionIsOneOf,
  fileIncludeReasonToDiagnostics: () => fileIncludeReasonToDiagnostics,
  fileShouldUseJavaScriptRequire: () => fileShouldUseJavaScriptRequire,
  filter: () => filter,
  filterMutate: () => filterMutate,
  filterSemanticDiagnostics: () => filterSemanticDiagnostics,
  find: () => find,
  findAncestor: () => findAncestor,
  findBestPatternMatch: () => findBestPatternMatch,
  findChildOfKind: () => findChildOfKind,
  findComputedPropertyNameCacheAssignment: () => findComputedPropertyNameCacheAssignment,
  findConfigFile: () => findConfigFile,
  findContainingList: () => findContainingList,
  findDiagnosticForNode: () => findDiagnosticForNode,
  findFirstNonJsxWhitespaceToken: () => findFirstNonJsxWhitespaceToken,
  findIndex: () => findIndex,
  findLast: () => findLast,
  findLastIndex: () => findLastIndex,
  findListItemInfo: () => findListItemInfo,
  findMap: () => findMap,
  findModifier: () => findModifier,
  findNextToken: () => findNextToken,
  findPackageJson: () => findPackageJson,
  findPackageJsons: () => findPackageJsons,
  findPrecedingMatchingToken: () => findPrecedingMatchingToken,
  findPrecedingToken: () => findPrecedingToken,
  findSuperStatementIndex: () => findSuperStatementIndex,
  findTokenOnLeftOfPosition: () => findTokenOnLeftOfPosition,
  findUseStrictPrologue: () => findUseStrictPrologue,
  first: () => first,
  firstDefined: () => firstDefined,
  firstDefinedIterator: () => firstDefinedIterator,
  firstIterator: () => firstIterator,
  firstOrOnly: () => firstOrOnly,
  firstOrUndefined: () => firstOrUndefined,
  firstOrUndefinedIterator: () => firstOrUndefinedIterator,
  fixupCompilerOptions: () => fixupCompilerOptions,
  flatMap: () => flatMap,
  flatMapIterator: () => flatMapIterator,
  flatMapToMutable: () => flatMapToMutable,
  flatten: () => flatten,
  flattenCommaList: () => flattenCommaList,
  flattenDestructuringAssignment: () => flattenDestructuringAssignment,
  flattenDestructuringBinding: () => flattenDestructuringBinding,
  flattenDiagnosticMessageText: () => flattenDiagnosticMessageText,
  forEach: () => forEach,
  forEachAncestor: () => forEachAncestor,
  forEachAncestorDirectory: () => forEachAncestorDirectory,
  forEachChild: () => forEachChild,
  forEachChildRecursively: () => forEachChildRecursively,
  forEachEmittedFile: () => forEachEmittedFile,
  forEachEnclosingBlockScopeContainer: () => forEachEnclosingBlockScopeContainer,
  forEachEntry: () => forEachEntry,
  forEachExternalModuleToImportFrom: () => forEachExternalModuleToImportFrom,
  forEachImportClauseDeclaration: () => forEachImportClauseDeclaration,
  forEachKey: () => forEachKey,
  forEachLeadingCommentRange: () => forEachLeadingCommentRange,
  forEachNameInAccessChainWalkingLeft: () => forEachNameInAccessChainWalkingLeft,
  forEachPropertyAssignment: () => forEachPropertyAssignment,
  forEachResolvedProjectReference: () => forEachResolvedProjectReference,
  forEachReturnStatement: () => forEachReturnStatement,
  forEachRight: () => forEachRight,
  forEachTrailingCommentRange: () => forEachTrailingCommentRange,
  forEachTsConfigPropArray: () => forEachTsConfigPropArray,
  forEachUnique: () => forEachUnique,
  forEachYieldExpression: () => forEachYieldExpression,
  forSomeAncestorDirectory: () => forSomeAncestorDirectory,
  formatColorAndReset: () => formatColorAndReset,
  formatDiagnostic: () => formatDiagnostic,
  formatDiagnostics: () => formatDiagnostics,
  formatDiagnosticsWithColorAndContext: () => formatDiagnosticsWithColorAndContext,
  formatGeneratedName: () => formatGeneratedName,
  formatGeneratedNamePart: () => formatGeneratedNamePart,
  formatLocation: () => formatLocation,
  formatMessage: () => formatMessage,
  formatStringFromArgs: () => formatStringFromArgs,
  formatting: () => ts_formatting_exports,
  fullTripleSlashAMDReferencePathRegEx: () => fullTripleSlashAMDReferencePathRegEx,
  fullTripleSlashReferencePathRegEx: () => fullTripleSlashReferencePathRegEx,
  generateDjb2Hash: () => generateDjb2Hash,
  generateTSConfig: () => generateTSConfig,
  generatorHelper: () => generatorHelper,
  getAdjustedReferenceLocation: () => getAdjustedReferenceLocation,
  getAdjustedRenameLocation: () => getAdjustedRenameLocation,
  getAliasDeclarationFromName: () => getAliasDeclarationFromName,
  getAllAccessorDeclarations: () => getAllAccessorDeclarations,
  getAllDecoratorsOfClass: () => getAllDecoratorsOfClass,
  getAllDecoratorsOfClassElement: () => getAllDecoratorsOfClassElement,
  getAllJSDocTags: () => getAllJSDocTags,
  getAllJSDocTagsOfKind: () => getAllJSDocTagsOfKind,
  getAllKeys: () => getAllKeys,
  getAllProjectOutputs: () => getAllProjectOutputs,
  getAllSuperTypeNodes: () => getAllSuperTypeNodes,
  getAllUnscopedEmitHelpers: () => getAllUnscopedEmitHelpers,
  getAllowJSCompilerOption: () => getAllowJSCompilerOption,
  getAllowSyntheticDefaultImports: () => getAllowSyntheticDefaultImports,
  getAncestor: () => getAncestor,
  getAnyExtensionFromPath: () => getAnyExtensionFromPath,
  getAreDeclarationMapsEnabled: () => getAreDeclarationMapsEnabled,
  getAssignedExpandoInitializer: () => getAssignedExpandoInitializer,
  getAssignedName: () => getAssignedName,
  getAssignmentDeclarationKind: () => getAssignmentDeclarationKind,
  getAssignmentDeclarationPropertyAccessKind: () => getAssignmentDeclarationPropertyAccessKind,
  getAssignmentTargetKind: () => getAssignmentTargetKind,
  getAutomaticTypeDirectiveNames: () => getAutomaticTypeDirectiveNames,
  getBaseFileName: () => getBaseFileName,
  getBinaryOperatorPrecedence: () => getBinaryOperatorPrecedence,
  getBuildInfo: () => getBuildInfo,
  getBuildInfoFileVersionMap: () => getBuildInfoFileVersionMap,
  getBuildInfoText: () => getBuildInfoText,
  getBuildOrderFromAnyBuildOrder: () => getBuildOrderFromAnyBuildOrder,
  getBuilderCreationParameters: () => getBuilderCreationParameters,
  getBuilderFileEmit: () => getBuilderFileEmit,
  getCheckFlags: () => getCheckFlags,
  getClassExtendsHeritageElement: () => getClassExtendsHeritageElement,
  getClassLikeDeclarationOfSymbol: () => getClassLikeDeclarationOfSymbol,
  getCombinedLocalAndExportSymbolFlags: () => getCombinedLocalAndExportSymbolFlags,
  getCombinedModifierFlags: () => getCombinedModifierFlags,
  getCombinedNodeFlags: () => getCombinedNodeFlags,
  getCombinedNodeFlagsAlwaysIncludeJSDoc: () => getCombinedNodeFlagsAlwaysIncludeJSDoc,
  getCommentRange: () => getCommentRange,
  getCommonSourceDirectory: () => getCommonSourceDirectory,
  getCommonSourceDirectoryOfConfig: () => getCommonSourceDirectoryOfConfig,
  getCompilerOptionValue: () => getCompilerOptionValue,
  getCompilerOptionsDiffValue: () => getCompilerOptionsDiffValue,
  getConditions: () => getConditions,
  getConfigFileParsingDiagnostics: () => getConfigFileParsingDiagnostics,
  getConstantValue: () => getConstantValue,
  getContainerNode: () => getContainerNode,
  getContainingClass: () => getContainingClass,
  getContainingClassStaticBlock: () => getContainingClassStaticBlock,
  getContainingFunction: () => getContainingFunction,
  getContainingFunctionDeclaration: () => getContainingFunctionDeclaration,
  getContainingFunctionOrClassStaticBlock: () => getContainingFunctionOrClassStaticBlock,
  getContainingNodeArray: () => getContainingNodeArray,
  getContainingObjectLiteralElement: () => getContainingObjectLiteralElement,
  getContextualTypeFromParent: () => getContextualTypeFromParent,
  getContextualTypeFromParentOrAncestorTypeNode: () => getContextualTypeFromParentOrAncestorTypeNode,
  getCurrentTime: () => getCurrentTime,
  getDeclarationDiagnostics: () => getDeclarationDiagnostics,
  getDeclarationEmitExtensionForPath: () => getDeclarationEmitExtensionForPath,
  getDeclarationEmitOutputFilePath: () => getDeclarationEmitOutputFilePath,
  getDeclarationEmitOutputFilePathWorker: () => getDeclarationEmitOutputFilePathWorker,
  getDeclarationFromName: () => getDeclarationFromName,
  getDeclarationModifierFlagsFromSymbol: () => getDeclarationModifierFlagsFromSymbol,
  getDeclarationOfKind: () => getDeclarationOfKind,
  getDeclarationsOfKind: () => getDeclarationsOfKind,
  getDeclaredExpandoInitializer: () => getDeclaredExpandoInitializer,
  getDecorators: () => getDecorators,
  getDefaultCompilerOptions: () => getDefaultCompilerOptions2,
  getDefaultExportInfoWorker: () => getDefaultExportInfoWorker,
  getDefaultFormatCodeSettings: () => getDefaultFormatCodeSettings,
  getDefaultLibFileName: () => getDefaultLibFileName,
  getDefaultLibFilePath: () => getDefaultLibFilePath,
  getDefaultLikeExportInfo: () => getDefaultLikeExportInfo,
  getDiagnosticText: () => getDiagnosticText,
  getDiagnosticsWithinSpan: () => getDiagnosticsWithinSpan,
  getDirectoryPath: () => getDirectoryPath,
  getDirectoryToWatchFailedLookupLocation: () => getDirectoryToWatchFailedLookupLocation,
  getDirectoryToWatchFailedLookupLocationFromTypeRoot: () => getDirectoryToWatchFailedLookupLocationFromTypeRoot,
  getDocumentPositionMapper: () => getDocumentPositionMapper,
  getESModuleInterop: () => getESModuleInterop,
  getEditsForFileRename: () => getEditsForFileRename,
  getEffectiveBaseTypeNode: () => getEffectiveBaseTypeNode,
  getEffectiveConstraintOfTypeParameter: () => getEffectiveConstraintOfTypeParameter,
  getEffectiveContainerForJSDocTemplateTag: () => getEffectiveContainerForJSDocTemplateTag,
  getEffectiveImplementsTypeNodes: () => getEffectiveImplementsTypeNodes,
  getEffectiveInitializer: () => getEffectiveInitializer,
  getEffectiveJSDocHost: () => getEffectiveJSDocHost,
  getEffectiveModifierFlags: () => getEffectiveModifierFlags,
  getEffectiveModifierFlagsAlwaysIncludeJSDoc: () => getEffectiveModifierFlagsAlwaysIncludeJSDoc,
  getEffectiveModifierFlagsNoCache: () => getEffectiveModifierFlagsNoCache,
  getEffectiveReturnTypeNode: () => getEffectiveReturnTypeNode,
  getEffectiveSetAccessorTypeAnnotationNode: () => getEffectiveSetAccessorTypeAnnotationNode,
  getEffectiveTypeAnnotationNode: () => getEffectiveTypeAnnotationNode,
  getEffectiveTypeParameterDeclarations: () => getEffectiveTypeParameterDeclarations,
  getEffectiveTypeRoots: () => getEffectiveTypeRoots,
  getElementOrPropertyAccessArgumentExpressionOrName: () => getElementOrPropertyAccessArgumentExpressionOrName,
  getElementOrPropertyAccessName: () => getElementOrPropertyAccessName,
  getElementsOfBindingOrAssignmentPattern: () => getElementsOfBindingOrAssignmentPattern,
  getEmitDeclarations: () => getEmitDeclarations,
  getEmitFlags: () => getEmitFlags,
  getEmitHelpers: () => getEmitHelpers,
  getEmitModuleDetectionKind: () => getEmitModuleDetectionKind,
  getEmitModuleKind: () => getEmitModuleKind,
  getEmitModuleResolutionKind: () => getEmitModuleResolutionKind,
  getEmitScriptTarget: () => getEmitScriptTarget,
  getEnclosingBlockScopeContainer: () => getEnclosingBlockScopeContainer,
  getEncodedSemanticClassifications: () => getEncodedSemanticClassifications,
  getEncodedSyntacticClassifications: () => getEncodedSyntacticClassifications,
  getEndLinePosition: () => getEndLinePosition,
  getEntityNameFromTypeNode: () => getEntityNameFromTypeNode,
  getEntrypointsFromPackageJsonInfo: () => getEntrypointsFromPackageJsonInfo,
  getErrorCountForSummary: () => getErrorCountForSummary,
  getErrorSpanForNode: () => getErrorSpanForNode,
  getErrorSummaryText: () => getErrorSummaryText,
  getEscapedTextOfIdentifierOrLiteral: () => getEscapedTextOfIdentifierOrLiteral,
  getEscapedTextOfJsxAttributeName: () => getEscapedTextOfJsxAttributeName,
  getEscapedTextOfJsxNamespacedName: () => getEscapedTextOfJsxNamespacedName,
  getExpandoInitializer: () => getExpandoInitializer,
  getExportAssignmentExpression: () => getExportAssignmentExpression,
  getExportInfoMap: () => getExportInfoMap,
  getExportNeedsImportStarHelper: () => getExportNeedsImportStarHelper,
  getExpressionAssociativity: () => getExpressionAssociativity,
  getExpressionPrecedence: () => getExpressionPrecedence,
  getExternalHelpersModuleName: () => getExternalHelpersModuleName,
  getExternalModuleImportEqualsDeclarationExpression: () => getExternalModuleImportEqualsDeclarationExpression,
  getExternalModuleName: () => getExternalModuleName,
  getExternalModuleNameFromDeclaration: () => getExternalModuleNameFromDeclaration,
  getExternalModuleNameFromPath: () => getExternalModuleNameFromPath,
  getExternalModuleNameLiteral: () => getExternalModuleNameLiteral,
  getExternalModuleRequireArgument: () => getExternalModuleRequireArgument,
  getFallbackOptions: () => getFallbackOptions,
  getFileEmitOutput: () => getFileEmitOutput,
  getFileMatcherPatterns: () => getFileMatcherPatterns,
  getFileNamesFromConfigSpecs: () => getFileNamesFromConfigSpecs,
  getFileWatcherEventKind: () => getFileWatcherEventKind,
  getFilesInErrorForSummary: () => getFilesInErrorForSummary,
  getFirstConstructorWithBody: () => getFirstConstructorWithBody,
  getFirstIdentifier: () => getFirstIdentifier,
  getFirstNonSpaceCharacterPosition: () => getFirstNonSpaceCharacterPosition,
  getFirstProjectOutput: () => getFirstProjectOutput,
  getFixableErrorSpanExpression: () => getFixableErrorSpanExpression,
  getFormatCodeSettingsForWriting: () => getFormatCodeSettingsForWriting,
  getFullWidth: () => getFullWidth,
  getFunctionFlags: () => getFunctionFlags,
  getHeritageClause: () => getHeritageClause,
  getHostSignatureFromJSDoc: () => getHostSignatureFromJSDoc,
  getIdentifierAutoGenerate: () => getIdentifierAutoGenerate,
  getIdentifierGeneratedImportReference: () => getIdentifierGeneratedImportReference,
  getIdentifierTypeArguments: () => getIdentifierTypeArguments,
  getImmediatelyInvokedFunctionExpression: () => getImmediatelyInvokedFunctionExpression,
  getImpliedNodeFormatForFile: () => getImpliedNodeFormatForFile,
  getImpliedNodeFormatForFileWorker: () => getImpliedNodeFormatForFileWorker,
  getImportNeedsImportDefaultHelper: () => getImportNeedsImportDefaultHelper,
  getImportNeedsImportStarHelper: () => getImportNeedsImportStarHelper,
  getIndentSize: () => getIndentSize,
  getIndentString: () => getIndentString,
  getInferredLibraryNameResolveFrom: () => getInferredLibraryNameResolveFrom,
  getInitializedVariables: () => getInitializedVariables,
  getInitializerOfBinaryExpression: () => getInitializerOfBinaryExpression,
  getInitializerOfBindingOrAssignmentElement: () => getInitializerOfBindingOrAssignmentElement,
  getInterfaceBaseTypeNodes: () => getInterfaceBaseTypeNodes,
  getInternalEmitFlags: () => getInternalEmitFlags,
  getInvokedExpression: () => getInvokedExpression,
  getIsolatedModules: () => getIsolatedModules,
  getJSDocAugmentsTag: () => getJSDocAugmentsTag,
  getJSDocClassTag: () => getJSDocClassTag,
  getJSDocCommentRanges: () => getJSDocCommentRanges,
  getJSDocCommentsAndTags: () => getJSDocCommentsAndTags,
  getJSDocDeprecatedTag: () => getJSDocDeprecatedTag,
  getJSDocDeprecatedTagNoCache: () => getJSDocDeprecatedTagNoCache,
  getJSDocEnumTag: () => getJSDocEnumTag,
  getJSDocHost: () => getJSDocHost,
  getJSDocImplementsTags: () => getJSDocImplementsTags,
  getJSDocOverrideTagNoCache: () => getJSDocOverrideTagNoCache,
  getJSDocParameterTags: () => getJSDocParameterTags,
  getJSDocParameterTagsNoCache: () => getJSDocParameterTagsNoCache,
  getJSDocPrivateTag: () => getJSDocPrivateTag,
  getJSDocPrivateTagNoCache: () => getJSDocPrivateTagNoCache,
  getJSDocProtectedTag: () => getJSDocProtectedTag,
  getJSDocProtectedTagNoCache: () => getJSDocProtectedTagNoCache,
  getJSDocPublicTag: () => getJSDocPublicTag,
  getJSDocPublicTagNoCache: () => getJSDocPublicTagNoCache,
  getJSDocReadonlyTag: () => getJSDocReadonlyTag,
  getJSDocReadonlyTagNoCache: () => getJSDocReadonlyTagNoCache,
  getJSDocReturnTag: () => getJSDocReturnTag,
  getJSDocReturnType: () => getJSDocReturnType,
  getJSDocRoot: () => getJSDocRoot,
  getJSDocSatisfiesExpressionType: () => getJSDocSatisfiesExpressionType,
  getJSDocSatisfiesTag: () => getJSDocSatisfiesTag,
  getJSDocTags: () => getJSDocTags,
  getJSDocTagsNoCache: () => getJSDocTagsNoCache,
  getJSDocTemplateTag: () => getJSDocTemplateTag,
  getJSDocThisTag: () => getJSDocThisTag,
  getJSDocType: () => getJSDocType,
  getJSDocTypeAliasName: () => getJSDocTypeAliasName,
  getJSDocTypeAssertionType: () => getJSDocTypeAssertionType,
  getJSDocTypeParameterDeclarations: () => getJSDocTypeParameterDeclarations,
  getJSDocTypeParameterTags: () => getJSDocTypeParameterTags,
  getJSDocTypeParameterTagsNoCache: () => getJSDocTypeParameterTagsNoCache,
  getJSDocTypeTag: () => getJSDocTypeTag,
  getJSXImplicitImportBase: () => getJSXImplicitImportBase,
